# -*- coding: utf-8 -*-
"""rk1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/BloodInfection/4013af28f60d735d48c79e6d17c3ed36/rk1.ipynb
"""

!pip install pandas
!pip install seaborn
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/movies.csv')

df.isna().mean()

"""**Для набора данных проведите нормализацию для одного (произвольного) числового признака с использованием преобразования Бокса-Кокса (Box-Cox transformation).**"""

df.groupby('Audience score %')['Year'].agg('count').plot(kind = 'bar',figsize=( 16 , 8 ), ylabel = 'Count')

import scipy.stats as stats
def diagnostic_plots(df, variable):
    plt.figure(figsize=(20,10))
    # гистограмма
    plt.subplot(1, 2, 1)
    df[variable].hist(bins=30)
    ## Q-Q plot
    plt.subplot(1, 2, 2)
    stats.probplot(df[variable], dist="norm", plot=plt)
    plt.show()

df['Rating_boxcox'], param = stats.boxcox(df['Audience score %']) 
print('Оптимальное значение λ = {}'.format(param))
diagnostic_plots(df, 'Audience score %')

"""
**Для набора данных проведите процедуру отбора признаков (feature selection). Используйте класс SelectKBest для 5 лучших признаков, и метод, основанный на взаимной информации.** """

from sklearn.feature_selection import mutual_info_classif, mutual_info_regression, f_regression
from sklearn.feature_selection import SelectKBest, SelectPercentile

df2= pd.read_csv('/content/diabetes.csv')

dfX=df2[['Pregnancies','BloodPressure','SkinThickness','BMI','DiabetesPedigreeFunction','Glucose', 'Insulin', 'Age']]
dfY=df2[['Outcome']]
df3=df2.drop(columns= 'Outcome')
df2_feature_names= list(df3.columns)

mi = mutual_info_regression(dfX, dfY)
mi = pd.Series(mi)
mi.index = df2_feature_names
mi.sort_values(ascending=False).plot.bar(figsize=(10,5))
plt.ylabel('Взаимная информация')

sel_mi = SelectKBest(mutual_info_regression, k=5).fit(dfX, dfY)
list(zip(df2, sel_mi.get_support()))